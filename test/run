#!/usr/bin/env bash

set -x

# CI=true
# if [ "$CI" != true ]; then
  ATTACH_TO_TMUX=0
# fi

# Change to current dir (POSIXly).
cd -P -- "$(dirname -- "$0")"

# Look for existing vader installation.
vader=( ${HOME}/.vim/*bundle*/vader*/plugin/vader.vim )
if [ -f ${vader[0]} ]; then
    # Remove "plugin/vader.vim" suffix.
    vader=${vader[0]%/*/*}
fi

if [ -d $vader ]; then
    [[ ! -L vader.vim ]] && ln -s $vader vader.vim
else
    git clone https://github.com/junegunn/vader.vim.git
fi

VIM_SERVERNAME="DIMINACTIVE_TESTS_$RANDOM"
TMUX='tmux -L diminactive_tests'
VIM="HOME=/dev/null vim --servername $VIM_SERVERNAME -Nu vimrc -i NONE"

# Use a stamp file to indicate test failure (inside tmux).
STAMP_RET_TESTS=stamp.ret_tests
TMUX_PANE_CONTENTS=$(mktemp --tmpdir diminactive_tmux_contents_XXX)

echo Starting tmux session.
echo To inspect it manually: $TMUX attach

TMUX_SESSION_CMD="echo '$VIM'; $VIM ; \
  ret=\$?; echo \$ret > $STAMP_RET_TESTS; \
  echo Exit code: \$ret;"

# Capture pane contents when not attaching to tmux, add `read` otherwise.
if [ "$ATTACH_TO_TMUX" = 1 ]; then
  echo You will be auto-attached.
  TMUX_SESSION_CMD="$TMUX_SESSION_CMD ; read"
else
  TMUX_SESSION_CMD="$TMUX_SESSION_CMD ; \
    tmux capture-pane -S -32000 \; save-buffer $TMUX_PANE_CONTENTS"
fi

# Display tmux contents, from $TMUX_PANE_CONTENTS, if it has been
# created, or from a running tmux instance.
cat_tmux_contents() {
  f=$TMUX_PANE_CONTENTS
  if ! [ -s $f ]; then
    $TMUX capture-pane -S -32000 \; save-buffer $f
  fi
  echo "===== tmux pane contents ================================="
  cat $f
  rm $f
}

# DEBUG TRAVIS
echo "DEBUG==1"
HOME=/dev/null vim -V1 --servername DIMINACTIVE_TESTS_1 -Nu vimrc -i NONE -c 'q'
vim -V1 --servername DIMINACTIVE_TESTS_1 -Nu vimrc -i NONE -c 'q'
vim -V1 -Nu vimrc -i NONE -c 'q'

echo "DEBUG==2"
tmux new-session -P -d
tmux set-option remain-on-exit on
tmux new-window -d "vim -V1 -Nu vimrc -i NONE -c 'q'"
sleep 2
f=$(mktemp --tmpdir cat_tmux_contents.XXX)
tmux capture-pane -S -32000 \; save-buffer $f

echo "DEBUG==3"
tmux new-window -d "vim --servername foo -V1 -Nu vimrc -i NONE -c 'echo v:servername'"
sleep 2
f=$(mktemp --tmpdir cat_tmux_contents.XXX)
tmux capture-pane -S -32000 \; save-buffer $f

echo "REAL"
$TMUX new-session -P -d "$TMUX_SESSION_CMD"

printf "Waiting for Vim to listen"
for (( max_wait=10; --max_wait; )); do
  echo $max_wait
  printf '.'
  if [ "$(vim --servername $VIM_SERVERNAME \
        --remote-expr 'has("vim_starting")' 2>/dev/null)" = "0" ]; then
    break
  fi
  if [ -s "$TMUX_PANE_CONTENTS" ]; then
    # tmux pane contents has been created, maybe Vim failed to start?!
    break
  fi
  # Sleep for: 0.11, .., 0.24, .., 0.99
  sleep 0.$(( 99/max_wait ))
done
echo

# DEBUG
$TMUX list-sessions

if [ "$max_wait" -lt 1 ]; then
  echo "Failed to connect to Vim!"

  if [ "$ATTACH_TO_TMUX" = 1 ]; then
    $TMUX attach
  else
    cat_tmux_contents
    $TMUX kill-session
  fi
  exit 3
fi

# Send Vader command to Vim server, using 'sh -c' to use HOME=..
# Vader uses `:cquit` conditionally to make Vim exit with return code 1.
sh -c "$VIM --remote-send ':Vader! *<cr>'"

if [ "$ATTACH_TO_TMUX" = 1 ]; then
  $TMUX attach
fi

printf "Waiting for Vim to finish"
for (( max_wait=50; --max_wait; )); do
  sleep 0.5
  printf '.'
  if [ "$(vim --servername $VIM_SERVERNAME \
        --remote-expr '1' 2>/dev/null)" != "1" ]; then
    break
  fi
done
echo

if [ "$max_wait" -lt 1 ]; then
  echo "Vim did not finish in time!"
  cat_tmux_contents
elif [ "$ATTACH_TO_TMUX" = 0 ]; then
  cat_tmux_contents
fi

if [ -f "$STAMP_RET_TESTS" ]; then
  ret=$(cat "$STAMP_RET_TESTS")
  rm "$STAMP_RET_TESTS"
  exit $ret
fi
